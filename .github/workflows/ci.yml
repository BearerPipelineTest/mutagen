# Set the workflow name.
name: CI

# Execute the workflow on pushes and pull requests.
on: [push, pull_request]

# Define the workflow jobs.
jobs:
  verification:
    name: Commit Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: "Verify commits"
        id: verify
        run: |
          # Determine the commit range that requires verification.
          GITHUB_EVENT_NAME="${{ github.event_name }}"
          if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
            export VERIFY_COMMIT_START="origin/master"
            export VERIFY_COMMIT_END="${GITHUB_SHA}"
          elif [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            export VERIFY_COMMIT_START="${GITHUB_BASE_REF}"
            export VERIFY_COMMIT_END="${GITHUB_HEAD_REF}"
          else
            echo "Unexpected event type"
            exit 1
          fi

          # Run verification
          scripts/ci/verify.sh || exit 1
  versioning:
    name: Versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17'
      - name: "Analyze version information and release status"
        id: analyze
        run: |
          # Determine whether or not this is a release build.
          RELEASE="${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}"

          # Determine version target information for Go. If this is a release,
          # then we'll use the tag, otherwise we'll use the raw commit digest.
          if [ "${RELEASE}" = "true" ]; then
            TARGET="${GITHUB_REF#refs/tags/}"
          else
            TARGET="${GITHUB_SHA}"
          fi

          # Determine the sidecar image tags.
          SIDECAR_TAGS="$(go run scripts/ci/sidecar_tags.go)"

          # Set outputs.
          echo ::set-output name=release::${RELEASE}
          echo ::set-output name=target::${TARGET}
          echo ::set-output name=sidecar_tags::${SIDECAR_TAGS}
    outputs:
      release: ${{ steps.analyze.outputs.release }}
      target: ${{ steps.analyze.outputs.target }}
      sidecar_tags: ${{ steps.analyze.outputs.sidecar_tags }}
  macos:
    name: macOS
    runs-on: macos-11
    needs: [verification, versioning]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17'
      - name: "Install sha256sum"
        run: brew install coreutils
      - run: scripts/ci/setup_go.sh
      - run: scripts/ci/setup_ssh.sh
      - run: scripts/ci/setup_partitions_darwin.sh
      - run: scripts/ci/analyze.sh
      - run: scripts/ci/test.sh
      - run: scripts/ci/build.sh
        env:
          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}
          MACOS_CODESIGN_CERTIFICATE_AND_KEY: ${{ secrets.MACOS_CODESIGN_CERTIFICATE_AND_KEY }}
          MACOS_CODESIGN_CERTIFICATE_AND_KEY_PASSWORD: ${{ secrets.MACOS_CODESIGN_CERTIFICATE_AND_KEY_PASSWORD }}
      - run: scripts/ci/notarize.sh
        if: ${{ needs.versioning.outputs.release == 'true' }}
        env:
          MACOS_NOTARIZE_APPLE_ID: ${{ secrets.MACOS_NOTARIZE_APPLE_ID }}
          MACOS_NOTARIZE_APP_SPECIFIC_PASSWORD: ${{ secrets.MACOS_NOTARIZE_APP_SPECIFIC_PASSWORD }}
          MACOS_NOTARIZE_TEAM_ID: ${{ secrets.MACOS_NOTARIZE_TEAM_ID }}
      - uses: crazy-max/ghaction-import-gpg@v3
        id: import_gpg
        with:
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}
          passphrase: ${{ secrets.GPG_SIGNING_KEY_PASSWORD }}
      - run: scripts/ci/sha256sum.sh
        env:
          SHA256_GPG_SIGNING_IDENTITY: ${{ steps.import_gpg.outputs.email }}
      - uses: actions/upload-artifact@v2
        with:
          name: bundles
          path: build/release/*
          retention-days: 2
  linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: [verification]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17'
      - run: scripts/ci/setup_go.sh
      - run: scripts/ci/setup_ssh.sh
      - run: scripts/ci/setup_docker.sh
      - run: scripts/ci/analyze.sh
      - run: scripts/ci/test.sh
      - run: scripts/ci/test_386.sh
      - run: scripts/ci/build.sh
  windows:
    name: Windows
    runs-on: windows-latest
    needs: [verification]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17'
      - run: scripts/ci/setup_go.sh
        shell: bash
      - run: scripts/ci/setup_docker.sh
        shell: bash
      - run: diskpart /s scripts\ci\setup_partitions_windows.txt
      - run: scripts/ci/analyze.sh
        shell: bash
      - run: scripts/ci/test.sh
        shell: bash
      - run: scripts/ci/test_386.sh
        shell: bash
      - run: scripts/ci/build.sh
        shell: bash
  sidecar:
    name: Sidecar
    runs-on: ubuntu-latest
    needs: [versioning, macos, linux, windows]
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        if: ${{ needs.versioning.outputs.release == 'true' }}
        with:
          username: ${{ secrets.SIDECAR_DEPLOYMENT_USER }}
          password: ${{ secrets.SIDECAR_DEPLOYMENT_TOKEN }}
      - uses: docker/build-push-action@v2
        with:
          build-args: |
            TARGET=${{ needs.versioning.outputs.target }}
          context: images/sidecar/linux
          tags: ${{ needs.versioning.outputs.sidecar_tags }}
          push: ${{ needs.versioning.outputs.release == 'true' }}
          platforms: |
            linux/386
            linux/amd64
            linux/arm/v6
            linux/arm/v7
            linux/arm64/v8
            linux/ppc64le
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [versioning, macos, linux, windows, sidecar]
    if: ${{ needs.versioning.outputs.release == 'true' }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: bundles
          path: bundles
      - uses: alexellis/upload-assets@0.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["bundles/*"]'
